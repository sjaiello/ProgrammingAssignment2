chooseCRANmirror()
utils:::menuInstallPkgs()
q()
mydata <-rnorm(100)
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm=FALSE)
sd(na.rm=FALSE, mydata)
lm(y-x, mydata, 1:100, model = FALSE)
swril()
swirl()
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
swirl()
head(flags)
dim(flags)
View(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags@orange)
sum(flags@orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?lapply
library(datasets)
data("iris")
?iris
sapply(iris,mean)
?apply
tapply(iris, iris$Species, mean)
sapply(iris[,1:4],mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
?tapply
tapply(iris[,1],iris[,5],mean, rm.na = TRUE)
tapply(iris[,1],iris[,5],mean)
tapply(iris[,1:4],iris[,5],mean)
tapply(iris$Sepal.Length,iris$Species,mean)
library(datasets)
data("mtcars")
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
x1<-tapply(mtcars$hp, mtcars$cyl, mean)
x1[1,2]
x1[1]
x1[3] - x1[1]
x1[3]
x1[1] - x1[3]
tapply(iris$Sepal.Length,iris$Species, mean)
rowMeans9iris[,1:4]
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4,2, mean])
apply(iris[,1:4,2, mean)
apply(iris[,1:4],2, mean)
apply(iris[,1:4],1, mean)
apply(iris,2, mean)
head(mtcars)
tapply(mtcars$mpg, mtcars$c, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg,cyl,mean))
setwd("D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment")
myMatrix <- matrix(c(1,1,1,3,4,3,3,3,4), nrow nrow = 3, ncol = 3)
myMatrix <- matrix(c(1,1,1,3,4,3,3,3,4), nrow = 3, ncol = 3)
CachMatrix(myMatrix)
source('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
CachMatrix(myMatrix)
setwd("D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master")
CachMatrix(myMatrix)
CacheMatrix(myMatrix)
makeCacheMatrix(myMatrix)
cachSolve(myMatrix)
myCacheMatrix <- makeCacheMatrix(myMatrix)
myCacheMatrix$get()
myCacheMatrix$getInverse()
myCacheMatrix$gsetInverse()
myCacheMatrix$setInverse()
myCacheMatrix$setInverse(myCacheMatrix$get())
myCacheMatrix$getInverse()
myCacheMatrix$setInverse(solve(myCacheMatrix$get()))
myCacheMatrix$getInverse()
source('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
myTest <- makeCacheMatrix(myMatrix)
debugSource('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
myTest <- makeCacheMatrix(myMatrix)
View(makeCacheMatrix)
debugSource('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
myTest$get()
myTest$getInverse()
cacheSolve(myTest)
debugSource('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
myTest2 <- makeCacheMatrix(myMatrix)
debugSource('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
myTest2 <- makeCacheMatrix(myMatrix)
debugSource('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
cacheSolve(myTest2)
?set
source('D:/Users/Rusty Shackleford/My Documents/Dropbox/SteveOnfarmDocuments/Classes/RProgramming/Week3Assignment/ProgrammingAssignment2-master/cachematrix.R')
